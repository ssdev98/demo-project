# https://semantic-release.gitbook.io/semantic-release/recipes/ci-configurations/github-actions

name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches: '*' #all branches or [develop] # or main

permissions:
  contents: read

jobs:
  # Todo lintjob testjob buildjob releasejob deployjob
  release:
    # The following line is used to prevent forks from running this action
    if: github.repository == 'SoufianeSaadouni/demo-project'
    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

      #strategy:
      #matrix:
      #node-version: [21.x, 20.x, 18.x, 16.x]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: lts/*

      - name: Install dependencies
        # https://docs.npmjs.com/cli/v10/commands/npm-ci
        run: npm ci # or npm clean-install

        # https://github.blog/changelog/2022-07-26-a-new-npm-audit-signatures-command-to-verify-npm-package-integrity/
      - name: Verify the integrity of packages
        run: npm audit signatures

      - name: Run Lint
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Build project
        run: npm run build

        # No need to install because it is already installed
        #- name: Install GPG
        #run: sudo apt-get install -y gnupg

        # TODO: https://github.com/semantic-release/git#gpg-signature
        # https://github.com/semantic-release/git/issues/175#issuecomment-561833773
      - name: Import private key
        run: |
          echo -n "$GPG_PRIVATE_KEY" | gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --import
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg.conf
          echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf
          echo -n "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --import "$GPG_PRIVATE_KEY"
#echo "$GPG_PASSPHRASE" | /usr/lib/gnupg/gpg-preset-passphrase --preset $GPG_KEY_ID
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Configure git with GPG
        run: |
          git config --global user.signingkey $GPG_KEY_ID
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true
#git config --global gpg.program xxxxxxxxxxxx          
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

        # Run semantic-release only when tests succeed or all jobs succeed
      - name: Run semantic-release
        run: npx semantic-release
        env:
          GIT_AUTHOR_NAME: ${{ secrets.GIT_USERNAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.GIT_USERNAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_EMAIL }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Deploy project
        run: echo 'Deploying project . . .'
